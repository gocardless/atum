# encoding: utf-8
#
# WARNING: Do not edit by hand, this file was generated by Atum:
#
#   https://github.com/isaacseymour/atum
#
require 'atum'
require 'uri'
require_relative 'client'
<% @resources.each do |resource| %>
require_relative '<%= resource.name.underscore %>'
<% end %>

module <%= @module_name %>
  # Get a Client configured to use HTTP Basic authentication.
  #
  # @param api_key [String] The API key to use when connecting.
  # @param options [Hash<Symbol,String>] Optionally, custom settings
  #   to use with the client.  Allowed options are `default_headers`,
  #   `cache`, `user` and `url`.
  # @return [Client] A client configured to use the API with HTTP Basic
  #   authentication.
  def self.connect(api_key, options = nil)
    options = self.custom_options(options)
    uri = URI.parse(options[:url])
    uri.user = options.fetch(:user, 'user').gsub('@', '%40')
    uri.password = api_key
    client = Atum::Client.client_from_schema(SCHEMA, uri.to_s, options)
    Client.new(client)
  end

  # Get customized options.
  def self.custom_options(options)
    return self.default_options if options.nil?

    return self.default_options.merge(options) unless options[:default_headers]

    opts = self.default_options.merge(options)
    opts[:default_headers] = self.default_options[:default_headers].merge(options[:default_headers])

    opts
  end

  # Get the default options.
  def self.default_options
    { default_headers: <%= @default_headers %> }
  end

  SCHEMA = Atum::Schemas::ApiSchema.new(JSON.load(<<-'JSON'))
<%= @schema %>
JSON
end
